/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package importadordeponto;
import importadordeponto.localizaArquivos;
import importadordeponto.leArquivoTxt;
import java.io.BufferedReader;
import java.io.Console;
import java.io.File;
import java.io.FileReader;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author administrador
 */
public class ImportarPonto extends javax.swing.JFrame {

    /**
     * Creates new form ImportarPonto
     */
    public ImportarPonto() {
        initComponents();
        populeCompanyBox();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jRadioButton3 = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtCompanyCode = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtMes = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtData = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtAno = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("importador de Ponto , V 1.2");

        jLabel1.setText("Endereço do Arquivo");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Localizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cod", "Código Funcionário", "Nome", "Data", "Hora"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Cod");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Código Funcionário");
        }

        jButton2.setText("Ler e analisar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Modelo 2 (Ponto Antigo)");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Modelo 1 (Ponto Novo)");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Data", "Dia Semana", "Contagem"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable4);

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Modelo 3 (Ponto Antigo)");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2)
                        .addGap(19, 19, 19)
                        .addComponent(jRadioButton3))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jButton2)
                    .addComponent(jRadioButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ler e analisar", jPanel1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Código Funcionário Cadastral", "Código Funcionário Relógio de Ponto", "Nome", "Código da Empresa", "Data", "Hora1", "Hora2", "Hora3", "Hora4", "Dia", "Mês", "Ano", "Razão Social", "CNPJ", "Endereço", "CTPS", "Dia da Semana"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton3.setText("Gerar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Enviar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setText("Empresa:");
        jLabel2.setToolTipText("");

        jLabel3.setText("Mês: ");

        txtMes.setEditable(false);

        jLabel4.setText("Data:");

        txtData.setEditable(false);

        jLabel5.setText("Ano:");

        txtAno.setEditable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCompanyCode, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton4)
                        .addComponent(jLabel2)
                        .addComponent(txtCompanyCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txtMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Gerar, gerenciar e enviar", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      localizaArquivos a = new localizaArquivos(4);
      jTextField1.setText(a.getEndereçoArquivo());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        
        String endereco = jTextField1.getText();
        
        File f= new File(endereco);
        
        if(f.exists())
        {
            readFileMod(endereco);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Selecione um arquivo adequando para leitura");
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if(txtCompanyCode.getSelectedIndex() == -1 )
        {
            JOptionPane.showMessageDialog(null, "Código da empresa não pode ficar vazio.");
            return;
        }

        
        if(JOptionPane.showConfirmDialog(null, "Empresa foi selecionada corretamento?","Empresa",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
        {
            geraPonto();
            preencherPonto();
        }

        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
     
        
        
        if(JOptionPane.showConfirmDialog(null, "Deseja enviar para sistema gerencial as informações geradas?","Enviar",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
        {
            enviaDados();
        }
        
        
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportarPonto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportarPonto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportarPonto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportarPonto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImportarPonto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField txtAno;
    private javax.swing.JComboBox<String> txtCompanyCode;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtMes;
    // End of variables declaration//GEN-END:variables

private void readFileMod(String end)
{
    
    DAOLOCAL dao = new DAOLOCAL(true, true, "");
    dao.salvaBancoDados("delete FROM APP.INFORMACOES ");
       

    try 
    {
            File arquivoALer = new File(end);
            FileReader fileReader;
        fileReader = new FileReader(arquivoALer);
        File f = new File(end);
         if(f.exists())
         {
             BufferedReader reader = new BufferedReader(fileReader);
             String datatxt = null;
             Integer contador = 0;
                  while((datatxt = reader.readLine()) != null)
                  {
                      contador ++;
                      if(contador>1)
                      { 
                          String codigoFuncionario = null, nome= null, data= null, hora = null, dataString = null;


                        if(jRadioButton1.isSelected())
                        {
                          codigoFuncionario = datatxt.substring(9, 18);
                          nome = "'" +  datatxt.substring(19, 31) + "'";
                          data = "'" + datatxt.substring(38, 48) + "'";
                          dataString =  datatxt.substring(38, 48) ;
                          hora = "'" + datatxt.substring(50, 58)+ "'";
                          data = data.replaceAll("/","-");
                          dataString = dataString.replaceAll("/","-");
                        }
                          
                        if(jRadioButton2.isSelected())
                        {
                          codigoFuncionario = datatxt.substring(0, 2).trim().toString() ;
                          nome = "'" +  datatxt.substring(2, 17) + "'";
                          data = "'" + datatxt.substring(26, 36) + "'";
                          dataString =  datatxt.substring(26, 36) ;
                          hora = "'" + datatxt.substring(37, 45)+ "'";
                        }

                        if(jRadioButton3.isSelected())
                        {
                          codigoFuncionario = datatxt.substring(0, 2).trim().toString() ;
                          nome = "'" +  datatxt.substring(2, 17) + "'";
                          data = "'" + datatxt.substring(28, 38) + "'";
                          dataString =  datatxt.substring(28, 38) ;
                          hora = "'" + datatxt.substring(43, 48)+ "'";
                        }
                                                  
                         String salvaSql = "INSERT INTO APP.INFORMACOES ( CODFUNCIONARIO, NOME, DATA, HORA) VALUES ("
                                 + codigoFuncionario + " , "
                                 + nome + ", "
                                 + data + ", "
                                 + hora + ")";
                                 dao.salvaBancoDados(salvaSql);
                                 
                        if(contador == 2)
                      {
                          txtMes.setText(data.substring(6,8));
                          formataData dataFormatada = new formataData(dataString, "yyyy-mm-dd", "dd-mm-yyyy");                                                    
                          txtData.setText(dataFormatada.getStringFormatada());
                          txtAno.setText(data.substring(1,5));
                      }
                        
                      }
       
                      
                  }
                  
             
              fileReader.close();
              reader.close();
         }
         else
         {
             System.out.println("Arqivo: " + arquivoALer + " nao existe" );
         }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Erro ao importar verifique o formato do arquivo");
        dao.salvaBancoDados("delete FROM APP.INFORMACOES ");
        dao.finalizaConexão();
        return;
        
    }
    
        dao.execultaConsulta("SELECT * FROM APP.INFORMACOES order by CODFUNCIONARIO, data,hora");
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setNumRows(0);

        if(dao.getTotalDadosResultSet()<=0)
        {

            return;
        }

        try
        {
            dao.resultset.beforeFirst();
                while(dao.resultset.next())
                {

                String data = ((dao.resultset.getString("Data") != null ? dao.resultset.getString("Data") : ""));
               
                    try
                    {
                    if(!data.isEmpty())
                    {
                        formataData f = new formataData(data, "yyyy-MM-dd", "dd/MM/yyyy");
                        data = (f.getStringFormatada().toString());
                        
                    }
                    else
                        data = null;
                    }catch(Exception erro){}
                    

                    modelo.addRow(new Object[]
                        {

                            dao.resultset.getInt("COD"),
                            dao.resultset.getInt("CODFUNCIONARIO"),
                            dao.resultset.getString("NOME"),
                            data,
                            dao.resultset.getString("HORA")

                        });

                }
                
        }catch(Exception erro){
            JOptionPane.showMessageDialog(null, erro);
            dao.finalizaConexão();
            return;
        }
        
        String sqlVerificacao = "SELECT CODFUNCIONARIO,nome,data, count(hora) as ContagemDePonto FROM APP.INFORMACOES group by CODFUNCIONARIO, nome, data HAVING count(*) !=4";
        dao.execultaConsulta(sqlVerificacao);
        
        DefaultTableModel modelo2 = (DefaultTableModel) jTable4.getModel();
        modelo2.setNumRows(0);

        if(dao.getTotalDadosResultSet()<=0)
        {

            return;
        }

        try
        {
            dao.resultset.beforeFirst();
                while(dao.resultset.next())
                {

                String data = ((dao.resultset.getString("Data") != null ? dao.resultset.getString("Data") : ""));
                String diaDaSemana = null;
                    try
                    {
                    if(!data.isEmpty())
                    {
                        formataData f = new formataData(data, "yyyy-MM-dd", "dd/MM/yyyy");
                        data = (f.getStringFormatada().toString());
                        int ano = Integer.valueOf(data.substring(6, 10));
                        int mes = Integer.valueOf(data.substring(3, 5));
                        int dia = Integer.valueOf(data.substring(0, 2));
                        diaDaSemana = DataHora.getDiaSemana(ano, mes, dia);
                     }
                    else
                        data = null;
                    }catch(Exception erro){}
                    
                    
                    int contagemDePontos = dao.resultset.getInt("ContagemDePonto");
                    
                    if(diaDaSemana =="Sábado" &&  contagemDePontos != 2)
                    {
                        modelo2.addRow(new Object[]
                            {
                                dao.resultset.getString("NOME"),
                                data,
                                diaDaSemana,
                                dao.resultset.getString("ContagemDePonto")

                            });
                    }
                    else
                    {   if(diaDaSemana !="Sábado")
                        
                    {
                            modelo2.addRow(new Object[]
                            {
                                dao.resultset.getString("NOME"),
                                data,
                                diaDaSemana,
                                dao.resultset.getString("ContagemDePonto")

                            });
                    }

                    }
                }
                
                dao.finalizaConexão();
        }catch(Exception erro){
            JOptionPane.showMessageDialog(null, erro);
            dao.finalizaConexão();
            return;
        }

}

    private void populeCompanyBox() 
    {

     dadosSistema.setDadosSistema();
     sqlresultset resultsetCompanyNames = new sqlresultset("SELECT `Identificação da Empresa` as companyID FROM banco_central.adim_empresas_cadastral");
             
     if(resultsetCompanyNames.getTotalDadosResultSet()>0)
     {
         try {
             resultsetCompanyNames.resultset.first();
             for(int i=0; i< resultsetCompanyNames.getTotalDadosResultSet(); i++ )
             {
                txtCompanyCode.addItem(resultsetCompanyNames.resultset.getString("companyID"));
                resultsetCompanyNames.resultset.next();
             }
         } catch (SQLException ex) {            
             Logger.getLogger(ImportarPonto.class.getName()).log(Level.SEVERE, null, ex);
         }
     }
           
    }

    private void geraPonto() 
    {
        
            DAOLOCAL listaDeFuncionariosQuebateramPonto = new DAOLOCAL(true, true, "");
            DAOLOCAL listaHorasPontoBatidasPorDia = new DAOLOCAL(true, true, "");
            DAOLOCAL salvarPonto = new DAOLOCAL(true, true, "");
            salvarPonto.salvaBancoDados("delete FROM APP.PONTO");
            listaDeFuncionariosQuebateramPonto.execultaConsulta("SELECT CODFUNCIONARIO FROM APP.INFORMACOES group by CODFUNCIONARIO");
        
        
        int[] codigosFuncinariosNoPont;
        
        
        if (listaDeFuncionariosQuebateramPonto.getTotalDadosResultSet() <0)
        {
            return;
        }
        else
        {
           codigosFuncinariosNoPont = new int[listaDeFuncionariosQuebateramPonto.getTotalDadosResultSet()];
           
           
            try {
                listaDeFuncionariosQuebateramPonto.resultset.first();
                    for(int i =0 ; i<listaDeFuncionariosQuebateramPonto.getTotalDadosResultSet(); i++)
                   {

                       codigosFuncinariosNoPont[i] = listaDeFuncionariosQuebateramPonto.resultset.getInt(("CODFUNCIONARIO"));
                       listaDeFuncionariosQuebateramPonto.resultset.next();

                   }
                    listaDeFuncionariosQuebateramPonto.finalizaConexão();

            } catch (Exception e) {
            }
           
        }
            
        sqlresultset sqlDadosFuncionario = new sqlresultset("");
        for (int i=0; i < codigosFuncinariosNoPont.length ;i++)
        {
            
               // buscar dados do funcionario no db online
            
            String stringConsultaSqlDadosFuncionario = "SELECT * FROM banco_central.admindadosfuncempresaponto where CartaoPonto = " + codigosFuncinariosNoPont[i] + " and empresa = '" +  txtCompanyCode.getSelectedItem().toString() + "'";
            System.out.println(stringConsultaSqlDadosFuncionario);
            
            sqlDadosFuncionario.execultaConsulta(stringConsultaSqlDadosFuncionario);
            //Se tiver informacoes do funcionário continua
            if(sqlDadosFuncionario.getTotalDadosResultSet()>0)
            {
                
                int primeiroDiaDoMes = 1;
                int ultimoDiaDoMes = DataHora.getUltimoDiaMesDMA(txtData.getText());
                
                for(int diaDoMes=1; diaDoMes <= ultimoDiaDoMes; diaDoMes++)
                {
                    
                    String diaAtual = String.valueOf(diaDoMes);
                    if(diaDoMes<10)
                    {
                        diaAtual = "0" + String.valueOf(diaDoMes);
                    }
                    
                    String dataAtual = txtAno.getText() + "-" + txtMes.getText() + "-" + diaAtual;
                    String diaDaSemana = DataHora.getDiaSemana(Integer.valueOf(txtAno.getText()), Integer.valueOf(txtMes.getText()), Integer.valueOf(diaAtual));
                    
                    String hora1 = null;
                    String hora2 = null;
                    String hora3 = null;
                    String hora4 = null;
                    
                    String sqlPontosBatidos = "SELECT * FROM APP.INFORMACOES  where CODFUNCIONARIO = " + codigosFuncinariosNoPont[i] +" and DATA = '" + dataAtual +  "' order by HORA";
                    listaHorasPontoBatidasPorDia.execultaConsulta(sqlPontosBatidos);
                    
                    int contagemDePontos = listaHorasPontoBatidasPorDia.getTotalDadosResultSet();
                    if(contagemDePontos>4)
                    {
                        contagemDePontos = 4;
                    }
                    
                    
                    try {
                        listaHorasPontoBatidasPorDia.resultset.first();
                    } catch (Exception e) {
                    }
                    
                    for (int pc = 1; pc<=contagemDePontos;pc++)   
                    {
                        
                        switch(pc) {
                        case 1:
                            {
                                try {
                                    hora1 = "'" +   listaHorasPontoBatidasPorDia.resultset.getString("HORA") + "'" ;
                                } catch (SQLException ex) {
                                    Logger.getLogger(ImportarPonto.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                          break;

                        case 2:
                            {
                                try {
                                    hora2 = "'" + listaHorasPontoBatidasPorDia.resultset.getString("HORA")+ "'";
                                } catch (SQLException ex) {
                                    Logger.getLogger(ImportarPonto.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                          break;

                        case 3:
                            {
                                try {
                                    hora3 = "'" + listaHorasPontoBatidasPorDia.resultset.getString("HORA")+ "'";
                                } catch (SQLException ex) {
                                    Logger.getLogger(ImportarPonto.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                          break;

                        case 4:
                            {
                                try {
                                    hora4 = "'" + listaHorasPontoBatidasPorDia.resultset.getString("HORA")+ "'";
                                } catch (SQLException ex) {
                                    Logger.getLogger(ImportarPonto.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                          break;

                            }
                        
                        
                        try {
                        listaHorasPontoBatidasPorDia.resultset.next();
                    } catch (Exception e) {
                    }
                        
                    }                    
                    
                    
                    
                    try {
                        
                    String sqlSalvar = "INSERT INTO APP.PONTO ("
                            + "CODIGOFUNCIONARIOCADASTRAL, "
                            + "CODIGOFUNCIONARIONORELOGIODEPONTO, "
                            + "NOMEFUNCIONARIO, "
                            + "CODIGOEMPRESA, "
                            + "DATA, "
                            + "DIA, "
                            + "MES, "
                            + "ANO, "
                            + "HORAENTRADA1, "
                            + "HORASAIDA1, "
                            + "HORAENTRADA2, "
                            + "HORASAIDA2, "
                            + "RAZAOSOCIALEMPRESA, "
                            + "CNPJ, "
                            + "ENDERECO, "
                            + "CARTEIRADETRABALHO, "
                            + "DIADASEMANA) "
                            + "VALUES ("
                            + "" + sqlDadosFuncionario.resultset.getString("CodigoFuncionario") + ", "
                            + "" + codigosFuncinariosNoPont[i] + ", "
                            + "'" + sqlDadosFuncionario.resultset.getString("NomeFuncionario") + "', "
                            + "" + sqlDadosFuncionario.resultset.getString("CodigoEmpresa") + ", "
                            + "'" + dataAtual + "', "
                            + "" + diaAtual +   ", "
                            + "" + txtMes.getText() +   ", "
                            + "" + txtAno.getText() +   ", "
                            + "" + hora1 + ", "
                            + "" + hora2 + ", "
                            + "" + hora3 + ", "
                            + "" + hora4 + ", "
                            + "'" + sqlDadosFuncionario.resultset.getString("empresa") + "', "
                            + "'" + sqlDadosFuncionario.resultset.getString("CNPJ") + "', "
                            + "'" + sqlDadosFuncionario.resultset.getString("endereco") + "', "
                            + "'" + sqlDadosFuncionario.resultset.getString("CTPS") + "', "
                            + "'" + diaDaSemana  +  "')" ;
                        
                        salvarPonto.salvaBancoDados(sqlSalvar);
                        
                        
                    } catch (Exception e) {
                    }
                    
                }
                
            }
             
                
        }

                    salvarPonto.finalizaConexão();
                    sqlDadosFuncionario.finalizaConexão();
                    listaDeFuncionariosQuebateramPonto.finalizaConexão();
                    listaHorasPontoBatidasPorDia.finalizaConexão();
        
        
        
    }

    private void preencherPonto() 
    {
  
        
        DAOLOCAL dao = new DAOLOCAL(true, true, "");

        dao.execultaConsulta("SELECT * FROM APP.PONTO");
        DefaultTableModel modelo = (DefaultTableModel) jTable2.getModel();
        modelo.setNumRows(0);

        if(dao.getTotalDadosResultSet()<=0)
        {

            return;
        }

        try
        {
            dao.resultset.beforeFirst();
                while(dao.resultset.next())
                {

                String data = ((dao.resultset.getString("Data") != null ? dao.resultset.getString("Data") : ""));
               
                    try
                    {
                    if(!data.isEmpty())
                    {
                        formataData f = new formataData(data, "yyyy-MM-dd", "dd/MM/yyyy");
                        data = (f.getStringFormatada().toString());
                        
                    }
                    else
                        data = null;
                    }catch(Exception erro){}
                    
                    modelo.addRow(new Object[]
                        {
                            dao.resultset.getInt("ID"),
                            dao.resultset.getInt("CODIGOFUNCIONARIOCADASTRAL"),
                            dao.resultset.getString("CODIGOFUNCIONARIONORELOGIODEPONTO"),
                            dao.resultset.getString("NOMEFUNCIONARIO"),
                            dao.resultset.getString("CODIGOEMPRESA"),
                            dao.resultset.getString("DATA"),
                            dao.resultset.getString("HORAENTRADA1"),
                            dao.resultset.getString("HORASAIDA1"),
                            dao.resultset.getString("HORAENTRADA2"),
                            dao.resultset.getString("HORASAIDA2"),
                            dao.resultset.getString("DIA"),
                            dao.resultset.getString("MES"),
                            dao.resultset.getString("ANO"),
                            dao.resultset.getString("RAZAOSOCIALEMPRESA"),
                            dao.resultset.getString("CNPJ"),
                            dao.resultset.getString("ENDERECO"),
                            dao.resultset.getString("CARTEIRADETRABALHO"),
                            dao.resultset.getString("DIADASEMANA")

                        });

                    
                }
                
                
        }catch(Exception erro){
            JOptionPane.showMessageDialog(null, erro);
            dao.finalizaConexão();
            return;
        }
        
        
        
        
        
        
        
        
        
    }

    private void enviaDados() 
    {
        
        
        
        dadosSistema.setDadosSistema();
        sqlresultset resultsetCompanyNames = new sqlresultset("");
       
        
        
        DAOLOCAL dao = new DAOLOCAL(true, true, "");
        dao.execultaConsulta("SELECT * FROM APP.PONTO");
        if(dao.getTotalDadosResultSet()<=0)
        {

            return;
        }

        try
        {
            dao.resultset.beforeFirst();
                while(dao.resultset.next())
                {

                String data = ((dao.resultset.getString("Data") != null ? dao.resultset.getString("Data") : ""));
                
                String entrada1 = ((dao.resultset.getString("HORAENTRADA1") != null ? "'" +  dao.resultset.getString("HORAENTRADA1") + "'" : null));
                String saida1 = ((dao.resultset.getString("HORASAIDA1") != null ? "'" + dao.resultset.getString("HORASAIDA1") + "'" : null));
                String entrada2 = ((dao.resultset.getString("HORAENTRADA2") != null ? "'" + dao.resultset.getString("HORAENTRADA2") + "'" : null));
                String saida2 = ((dao.resultset.getString("HORASAIDA2") != null ? "'" + dao.resultset.getString("HORASAIDA2") + "'" : null));

                
                    try
                    {
                    if(!data.isEmpty())
                    {
                        formataData f = new formataData(data, "yyyy-MM-dd", "dd/MM/yyyy");
                        data = (f.getStringFormatada().toString());
                        
                    }
                    else
                        data = null;
                    }catch(Exception erro){}
                    
                    String sqlSalva = "INSERT INTO `banco_central`.`controle_ponto` ("
                            + "`Codigo Funcionario`, "
                            + "`Nome Funcionario`, "
                            + "`Codigo empresa`, "
                            + "`Data`, "
                            + "`Entrada1`, "
                            + "`Saida1`, "
                            + "`Entrada2`, "
                            + "`Saida2`, "
                            + "`Dia`, "
                            + "`Mes`, "
                            + "`Ano`, "
                            + "`Razao Social`, "
                            + "`CNPJ`, "
                            + "`Endereço`, "
                            + "`Carteira de trabalho`, "
                            + "`DiaDaSemana`"
                            + ") VALUES ("
                            + dao.resultset.getInt("CODIGOFUNCIONARIOCADASTRAL") +  ", "
                            + "'" + dao.resultset.getString("NOMEFUNCIONARIO") +  "', "
                            + dao.resultset.getInt("CODIGOEMPRESA") +  ", "
                            + "'" + dao.resultset.getString("DATA") +  "', "
                            +  entrada1 +  ", "
                            +  saida1 +  ", "
                            +  entrada2 +  ", "
                            +  saida2 +  ", "
                            + dao.resultset.getInt("DIA") +  ", "
                            + dao.resultset.getInt("MES") +  ", "
                            + dao.resultset.getInt("ANO") +  ", "
                            + "'" + dao.resultset.getString("RAZAOSOCIALEMPRESA") +  "', "
                            + "'" + dao.resultset.getString("CNPJ") +  "', "
                            + "'" + dao.resultset.getString("ENDERECO") +  "', "
                            + "'" + dao.resultset.getString("CARTEIRADETRABALHO") +  "', "
                            + "'" + dao.resultset.getString("DIADASEMANA") +  "') ";
                    
                    System.out.println(sqlSalva);
                    resultsetCompanyNames.salvaBancoDados(sqlSalva);
                    
                }
                
                
        }catch(Exception erro){
            JOptionPane.showMessageDialog(null, erro);
            dao.finalizaConexão();
            return;
        }
        
        
        
        
    }

   
    
    
    

}
